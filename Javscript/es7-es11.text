ES7（ECMAScript 2016):
Array.prototype.includes()：Array.prototype.includes() 方法用于检查数组中是否包含特定元素。它返回一个布尔值，表示是否包含。
const array = [1, 2, 3];
console.log(array.includes(2)); // true

ES8（ECMAScript 2017）：
异步函数：引入了async/await语法，简化了异步操作的处理。async函数返回一个Promise对象，await用于等待一个Promise解决。
async function fetchData() {
  const response = await fetch('https://example.com');
  const data = await response.json();
  return data;
}

Object.values() 和 Object.entries()：引入了Object.values()和Object.entries()方法，用于获取对象的值和键值对的数组。
const obj = { a: 1, b: 2 };
console.log(Object.values(obj)); // [1, 2]
console.log(Object.entries(obj)); // [['a', 1], ['b', 2]]

ES9（ECMAScript 2018）
Rest/Spread 属性：引入了对象的剩余属性（Rest Properties）和展开属性（Spread Properties）语法。
const { a, ...rest } = { a: 1, b: 2, c: 3 };
console.log(a); // 1
console.log(rest); // { b: 2, c: 3 }

Promise.prototype.finally()：Promise.prototype.finally() 方法允许你在Promise链中添加一个回调，该回调在Promise状态变为fulfilled或rejected时都会执行。
fetch('https://example.com')
  .then(response => response.json())
  .catch(error => console.error(error))
  .finally(() => console.log('Fetch complete'));

ES10（ECMAScript 2019）：
Array.prototype.flat() 和 Array.prototype.flatMap()：引入了Array.prototype.flat()和Array.prototype.flatMap() 方法，用于处理嵌套数组。
const nestedArray = [1, [2, [3, 4]]];
console.log(nestedArray.flat(2)); // [1, 2, 3, 4]

String.prototype.trimStart() 和 String.prototype.trimEnd()：引入了String.prototype.trimStart()和String.prototype.trimEnd() 方法，用于移除字符串开头或结尾的空白字符。
const str = '   Hello, World!   ';
console.log(str.trimStart()); // 'Hello, World!   '
console.log(str.trimEnd());   // '   Hello, World!'

ES11（ECMAScript 2020）：
可选链操作符（Optional Chaining Operator）：引入了?.操作符，允许在访问可能不存在的属性或方法时避免引发错误。
const user = { address: { street: '123 Main St' } };
console.log(user.address?.street); // '123 Main St'

空值合并操作符（Nullish Coalescing Operator）：引入了??操作符，用于提供默认值，只有在左侧表达式的值为null或undefined时才会使用默认值。
const defaultValue = 'Default Value';
const userValue = null;
const result = userValue ?? defaultValue;
console.log(result); // 'Default Value'

新的全局对象：引入了全局对象globalThis，它提供了一种跨平台的方式来访问全局对象。
console.log(globalThis === window); // 在浏览器中为 true
